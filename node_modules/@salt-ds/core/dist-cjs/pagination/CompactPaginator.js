'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var Button = require('../button/Button.js');
var Text = require('../text/Text.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextNotation.js');
require('../text/TextAction.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var icons = require('@salt-ds/icons');
var PageButton = require('./PageButton.js');
var usePaginationContext = require('./usePaginationContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var CompactPaginator$1 = require('./CompactPaginator.css.js');

const withBaseName = makePrefixer.makePrefixer("saltCompactPaginator");
const CompactPaginator = React.forwardRef(function CompactPaginator2({ children, className, ...restProps }, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-compact-paginator",
    css: CompactPaginator$1,
    window: targetWindow
  });
  const { count, page, onPageChange } = usePaginationContext.usePaginationContext();
  const onPreviousPage = (event) => {
    onPageChange(event, Math.max(1, page - 1));
  };
  const onNextPage = (event) => {
    onPageChange(event, Math.min(page + 1, count));
  };
  const isOnFirstPage = page === 1;
  const isOnLastPage = page === count;
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(withBaseName(), className),
    ...restProps,
    ref,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(Button.Button, {
        variant: "secondary",
        "aria-label": "Previous Page",
        onClick: onPreviousPage,
        disabled: isOnFirstPage,
        className: withBaseName("arrowButton"),
        children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronLeftIcon, {
          "aria-hidden": true
        })
      }),
      children ? children : /* @__PURE__ */ jsxRuntime.jsx(PageButton.PageButton, {
        page,
        disabled: true
      }),
      /* @__PURE__ */ jsxRuntime.jsx(Text.Text, {
        as: "span",
        variant: "secondary",
        children: "of"
      }),
      /* @__PURE__ */ jsxRuntime.jsx(PageButton.PageButton, {
        page: count,
        disabled: isOnLastPage
      }),
      /* @__PURE__ */ jsxRuntime.jsx(Button.Button, {
        variant: "secondary",
        "aria-label": "Next Page",
        onClick: onNextPage,
        disabled: isOnLastPage,
        className: withBaseName("arrowButton"),
        children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronRightIcon, {
          "aria-hidden": true
        })
      })
    ]
  });
});

exports.CompactPaginator = CompactPaginator;
//# sourceMappingURL=CompactPaginator.js.map
