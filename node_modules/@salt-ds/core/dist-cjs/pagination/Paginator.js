'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var Button = require('../button/Button.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var icons = require('@salt-ds/icons');
var PageRanges = require('./PageRanges.js');
var usePaginationContext = require('./usePaginationContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Paginator$1 = require('./Paginator.css.js');

const withBaseName = makePrefixer.makePrefixer("saltPaginator");
const Paginator = React.forwardRef(
  function Paginator2({ className, boundaryCount, siblingCount, ...restProps }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-paginator",
      css: Paginator$1,
      window: targetWindow
    });
    const { count, page, onPageChange } = usePaginationContext.usePaginationContext();
    const onPreviousPage = (event) => {
      onPageChange(event, Math.max(1, page - 1));
    };
    const onNextPage = (event) => {
      onPageChange(event, Math.min(page + 1, count));
    };
    const isOnFirstPage = page === 1;
    const isOnLastPage = page === count;
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(withBaseName(), className),
      ...restProps,
      ref,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(Button.Button, {
          variant: "secondary",
          "aria-label": "Previous Page",
          onClick: onPreviousPage,
          disabled: isOnFirstPage,
          className: withBaseName("arrowButton-previous"),
          children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronLeftIcon, {
            "aria-hidden": true
          })
        }),
        /* @__PURE__ */ jsxRuntime.jsx(PageRanges.PageRanges, {
          siblingCount,
          boundaryCount
        }),
        /* @__PURE__ */ jsxRuntime.jsx(Button.Button, {
          variant: "secondary",
          "aria-label": "Next Page",
          onClick: onNextPage,
          disabled: isOnLastPage,
          className: withBaseName("arrowButton-next"),
          children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronRightIcon, {
            "aria-hidden": true
          })
        })
      ]
    });
  }
);

exports.Paginator = Paginator;
//# sourceMappingURL=Paginator.js.map
