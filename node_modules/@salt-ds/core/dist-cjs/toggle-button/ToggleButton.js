'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
require('../toggle-button-group/ToggleButtonGroup.js');
var ToggleButtonGroupContext = require('../toggle-button-group/ToggleButtonGroupContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var ToggleButton$1 = require('./ToggleButton.css.js');

const withBaseName = makePrefixer.makePrefixer("saltToggleButton");
const ToggleButton = React.forwardRef(
  function ToggleButton2(props, ref) {
    const {
      children,
      className,
      disabled: disabledProp,
      value,
      onClick,
      onFocus,
      onChange,
      selected: selectedProp,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-toggle-button",
      css: ToggleButton$1,
      window: targetWindow
    });
    const buttonRef = React.useRef(null);
    const handleRef = useForkRef.useForkRef(ref, buttonRef);
    const toggleButtonGroup = ToggleButtonGroupContext.useToggleButtonGroup();
    const toggleButtonGroupSelected = toggleButtonGroup ? toggleButtonGroup.isSelected(value) : selectedProp;
    const focusable = toggleButtonGroup ? toggleButtonGroup == null ? void 0 : toggleButtonGroup.isFocused(value) : true;
    const disabled = (toggleButtonGroup == null ? void 0 : toggleButtonGroup.disabled) || disabledProp;
    const [selected, setSelected] = useControlled.useControlled({
      controlled: toggleButtonGroupSelected,
      default: Boolean(selectedProp),
      name: "ToggleButton",
      state: "selected"
    });
    const handleClick = (event) => {
      toggleButtonGroup == null ? void 0 : toggleButtonGroup.select(event);
      setSelected(!selected);
      onChange == null ? void 0 : onChange(event);
      onClick == null ? void 0 : onClick(event);
    };
    const handleFocus = (event) => {
      toggleButtonGroup == null ? void 0 : toggleButtonGroup.focus(value);
      onFocus == null ? void 0 : onFocus(event);
    };
    const ariaChecked = selected && !disabled;
    return /* @__PURE__ */ jsxRuntime.jsx("button", {
      "aria-pressed": !toggleButtonGroup ? ariaChecked : void 0,
      "aria-checked": toggleButtonGroup ? ariaChecked : void 0,
      role: toggleButtonGroup ? "radio" : void 0,
      className: clsx.clsx(withBaseName(), className),
      disabled,
      ref: handleRef,
      onClick: handleClick,
      onFocus: handleFocus,
      tabIndex: focusable && !disabled ? 0 : -1,
      value,
      ...rest,
      children
    });
  }
);

exports.ToggleButton = ToggleButton;
//# sourceMappingURL=ToggleButton.js.map
