'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var clsx = require('clsx');
var ExpansionIcon = require('./ExpansionIcon.js');
var ConditionalWrapper = require('./ConditionalWrapper.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var NavigationItem$1 = require('./NavigationItem.css.js');

const withBaseName = makePrefixer.makePrefixer("saltNavigationItem");
const NavigationItem = React.forwardRef(
  function NavigationItem2(props, ref) {
    const {
      active,
      blurActive,
      children,
      className,
      expanded = false,
      orientation = "horizontal",
      parent,
      level = 0,
      onExpand,
      href,
      style: styleProp,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-navigation-item",
      css: NavigationItem$1,
      window: targetWindow
    });
    const style = {
      ...styleProp,
      "--saltNavigationItem-level": `${level}`
    };
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref,
      className: clsx.clsx(withBaseName(), className),
      style,
      ...rest,
      children: /* @__PURE__ */ jsxRuntime.jsxs(ConditionalWrapper.ConditionalWrapper, {
        className: clsx.clsx(
          withBaseName("wrapper"),
          {
            [withBaseName("active")]: active || blurActive,
            [withBaseName("blurActive")]: blurActive,
            [withBaseName("rootItem")]: level === 0
          },
          withBaseName(orientation)
        ),
        parent,
        expanded,
        onExpand,
        active,
        href,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("span", {
            className: withBaseName("label"),
            children
          }),
          parent && /* @__PURE__ */ jsxRuntime.jsx(ExpansionIcon.ExpansionIcon, {
            expanded,
            orientation
          })
        ]
      })
    });
  }
);

exports.NavigationItem = NavigationItem;
//# sourceMappingURL=NavigationItem.js.map
