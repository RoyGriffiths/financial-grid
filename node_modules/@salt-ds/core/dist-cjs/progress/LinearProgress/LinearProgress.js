'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var makePrefixer = require('../../utils/makePrefixer.js');
require('../../utils/useFloatingUI/useFloatingUI.js');
require('../../utils/useId.js');
require('../../salt-provider/SaltProvider.js');
require('../../viewport/ViewportProvider.js');
var Text = require('../../text/Text.js');
require('../../text/Display.js');
require('../../text/Headings.js');
require('../../text/Label.js');
require('../../text/TextNotation.js');
require('../../text/TextAction.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var LinearProgress$1 = require('./LinearProgress.css.js');

const withBaseName = makePrefixer.makePrefixer("saltLinearProgress");
const LinearProgress = React.forwardRef(
  function LinearProgress2({ className, hideLabel = false, max = 100, min = 0, value = 0, ...rest }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-linear-progress",
      css: LinearProgress$1,
      window: targetWindow
    });
    const progress = (value - min) / (max - min) * 100;
    const barStyle = {};
    const trackStyle = {};
    barStyle.transform = `translateX(${progress - 100}%)`;
    trackStyle.transform = `translateX(${progress}%)`;
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(withBaseName(), className),
      ref,
      role: "progressbar",
      "aria-valuemax": max,
      "aria-valuemin": min,
      "aria-valuenow": Math.round(value),
      ...rest,
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: withBaseName("barContainer"),
          children: [
            /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("bar"),
              style: barStyle
            }),
            /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("track"),
              style: trackStyle
            })
          ]
        }),
        !hideLabel && /* @__PURE__ */ jsxRuntime.jsx(Text.Text, {
          styleAs: "h2",
          className: withBaseName("progressLabel"),
          children: `${Math.round(progress)} %`
        })
      ]
    });
  }
);

exports.LinearProgress = LinearProgress;
//# sourceMappingURL=LinearProgress.js.map
