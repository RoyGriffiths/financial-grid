'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var makePrefixer = require('../../utils/makePrefixer.js');
require('../../utils/useFloatingUI/useFloatingUI.js');
require('../../utils/useId.js');
require('../../salt-provider/SaltProvider.js');
require('../../viewport/ViewportProvider.js');
var Text = require('../../text/Text.js');
require('../../text/Display.js');
require('../../text/Headings.js');
require('../../text/Label.js');
require('../../text/TextNotation.js');
require('../../text/TextAction.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var CircularProgress$1 = require('./CircularProgress.css.js');

const withBaseName = makePrefixer.makePrefixer("saltCircularProgress");
const CircularProgress = React.forwardRef(function CircularProgress2({ className, hideLabel = false, max = 100, min = 0, value = 0, ...rest }, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-circular-progress",
    css: CircularProgress$1,
    window: targetWindow
  });
  const subOverlayRightStyle = {};
  const subOverlayLeftStyle = {};
  const getRotationAngle = (progress2, shift = 0) => {
    return -180 + (progress2 - shift) / 50 * 180;
  };
  const progress = (value - min) / (max - min) * 100;
  if (progress <= 50) {
    const rotationAngle = getRotationAngle(progress);
    subOverlayRightStyle.transform = `rotate(${rotationAngle}deg)`;
    subOverlayLeftStyle.transform = "rotate(-180deg)";
  } else {
    const rotationAngle = getRotationAngle(progress, 50);
    subOverlayRightStyle.transform = "rotate(0deg)";
    subOverlayLeftStyle.transform = `rotate(${rotationAngle}deg)`;
  }
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(withBaseName(), className),
    ref,
    role: "progressbar",
    "aria-valuemax": max,
    "aria-valuemin": min,
    "aria-valuenow": Math.round(value),
    ...rest,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("track")
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: withBaseName("bars"),
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("barOverlayRight"),
            children: /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("barSubOverlayRight"),
              style: subOverlayRightStyle,
              children: /* @__PURE__ */ jsxRuntime.jsx("div", {
                className: withBaseName("bar")
              })
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("barOverlayLeft"),
            children: /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("barSubOverlayLeft"),
              style: subOverlayLeftStyle,
              children: /* @__PURE__ */ jsxRuntime.jsx("div", {
                className: withBaseName("bar")
              })
            })
          })
        ]
      }),
      !hideLabel && /* @__PURE__ */ jsxRuntime.jsx(Text.Text, {
        styleAs: "h2",
        className: withBaseName("progressLabel"),
        children: `${Math.round(progress)} %`
      })
    ]
  });
});

exports.CircularProgress = CircularProgress;
//# sourceMappingURL=CircularProgress.js.map
