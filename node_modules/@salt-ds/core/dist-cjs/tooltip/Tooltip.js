'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
require('../status-indicator/StatusIndicator.js');
var ValidationStatus = require('../status-indicator/ValidationStatus.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var mergeProps = require('../utils/mergeProps.js');
var useTooltip = require('./useTooltip.js');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var TooltipBase = require('./TooltipBase.js');

const withBaseName = makePrefixer.makePrefixer("saltTooltip");
const Tooltip = React.forwardRef(
  function Tooltip2(props, ref) {
    const {
      children,
      className,
      disabled: disabledProp = false,
      hideArrow = false,
      hideIcon = false,
      open: openProp,
      content,
      status: statusProp = "info",
      placement = "right",
      enterDelay = 300,
      leaveDelay = 0,
      ...rest
    } = props;
    const {
      disabled: formFieldDisabled,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps.useFormFieldProps();
    const disabled = disabledProp || formFieldDisabled;
    const status = formFieldValidationStatus !== void 0 && ValidationStatus.VALIDATION_NAMED_STATUS.includes(formFieldValidationStatus) ? formFieldValidationStatus : statusProp;
    const { Component: FloatingComponent } = useFloatingUI.useFloatingComponent();
    const hookProps = {
      open: openProp,
      placement,
      enterDelay,
      leaveDelay,
      ...rest
    };
    const {
      arrowProps,
      open,
      floating,
      reference,
      getTriggerProps,
      getTooltipProps,
      getTooltipPosition
    } = useTooltip.useTooltip(hookProps);
    const triggerRef = useForkRef.useForkRef(
      React.isValidElement(children) ? children.ref : null,
      reference
    );
    const floatingRef = useForkRef.useForkRef(floating, ref);
    const hasContent = !!content;
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        React.isValidElement(children) && React.cloneElement(children, {
          ...mergeProps.mergeProps(getTriggerProps(), children.props),
          ref: triggerRef
        }),
        /* @__PURE__ */ jsxRuntime.jsx(FloatingComponent, {
          className: clsx.clsx(withBaseName(), withBaseName(status), className),
          open: open && !disabled && hasContent,
          ...getTooltipProps(),
          ref: floatingRef,
          ...getTooltipPosition(),
          children: /* @__PURE__ */ jsxRuntime.jsx(TooltipBase.TooltipBase, {
            hideIcon,
            status,
            content,
            hideArrow,
            arrowProps
          })
        })
      ]
    });
  }
);

exports.Tooltip = Tooltip;
//# sourceMappingURL=Tooltip.js.map
