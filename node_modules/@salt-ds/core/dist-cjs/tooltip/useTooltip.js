'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('@floating-ui/react');
var React = require('react');
var useControlled = require('../utils/useControlled.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('clsx');
var useAriaAnnounce = require('./useAriaAnnounce.js');

function useTooltip(props) {
  const {
    enterDelay,
    leaveDelay,
    open: openProp,
    onOpenChange,
    placement: placementProp,
    disableHoverListener,
    disableFocusListener
  } = props || {};
  const arrowRef = React.useRef(null);
  const [open, setOpen] = useControlled.useControlled({
    controlled: openProp,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  const handleOpenChange = (open2) => {
    setOpen(open2);
    onOpenChange == null ? void 0 : onOpenChange(open2);
  };
  const { floating, reference, x, y, strategy, placement, context, elements } = useFloatingUI.useFloatingUI({
    open,
    onOpenChange: handleOpenChange,
    placement: placementProp,
    middleware: [
      react.offset(8),
      react.flip(),
      react.shift({ limiter: react.limitShift() }),
      react.arrow({ element: arrowRef })
    ]
  });
  const { getReferenceProps, getFloatingProps } = react.useInteractions([
    react.useHover(context, {
      delay: {
        open: enterDelay,
        close: leaveDelay
      },
      enabled: !disableHoverListener,
      handleClose: react.safePolygon()
    }),
    react.useFocus(context, { enabled: !disableFocusListener }),
    react.useRole(context, { role: "tooltip" }),
    react.useDismiss(context),
    useAriaAnnounce.useAriaAnnounce(context, {
      delay: {
        open: enterDelay,
        close: leaveDelay
      }
    })
  ]);
  const arrowProps = {
    ref: arrowRef,
    context
  };
  const getTooltipProps = () => {
    const { tabIndex, ...tooltipProps } = getFloatingProps({
      "data-placement": placement,
      ref: floating
    });
    return tooltipProps;
  };
  const getTriggerProps = () => getReferenceProps({
    ref: reference
  });
  const getTooltipPosition = () => {
    var _a, _b;
    return {
      top: y != null ? y : 0,
      left: x != null ? x : 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  };
  return {
    arrowProps,
    open,
    floating,
    reference,
    getTooltipProps,
    getTriggerProps,
    getTooltipPosition
  };
}

exports.useTooltip = useTooltip;
//# sourceMappingURL=useTooltip.js.map
