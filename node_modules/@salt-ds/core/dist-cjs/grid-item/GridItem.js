'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useResponsiveProp = require('../utils/useResponsiveProp.js');
var GridItem$1 = require('./GridItem.css.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');

const GRID_ALIGNMENT_BASE = [
  "start",
  "end",
  "center",
  "stretch"
];
const withBaseName = makePrefixer.makePrefixer("saltGridItem");
const colStart = "auto";
const colEnd = "auto";
const rowStart = "auto";
const rowEnd = "auto";
const GridItem = React.forwardRef(
  ({
    as,
    children,
    className,
    colSpan,
    rowSpan,
    horizontalAlignment = "stretch",
    verticalAlignment = "stretch",
    style,
    ...rest
  }, ref) => {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-grid-item",
      css: GridItem$1,
      window: targetWindow
    });
    const Component = as || "div";
    const gridItemColSpan = useResponsiveProp.useResponsiveProp(colSpan, "auto");
    const gridItemRowSpan = useResponsiveProp.useResponsiveProp(rowSpan, "auto");
    const gridColumnStart = gridItemColSpan ? `span ${gridItemColSpan}` : colStart;
    const gridColumnEnd = gridItemColSpan ? `span ${gridItemColSpan}` : colEnd;
    const gridRowStart = gridItemRowSpan ? `span ${gridItemRowSpan}` : rowStart;
    const gridRowEnd = gridItemRowSpan ? `span ${gridItemRowSpan}` : rowEnd;
    const gridStyles = {
      ...style,
      "--gridItem-justifySelf": horizontalAlignment,
      "--gridItem-alignSelf": verticalAlignment,
      "--gridItem-gridRowStart": gridRowStart,
      "--gridItem-gridColumnStart": gridColumnStart,
      "--gridItem-gridRowEnd": gridRowEnd,
      "--gridItem-gridColumnEnd": gridColumnEnd
    };
    return /* @__PURE__ */ jsxRuntime.jsx(Component, {
      className: clsx.clsx(withBaseName(), className),
      style: gridStyles,
      ref,
      ...rest,
      children
    });
  }
);

exports.GRID_ALIGNMENT_BASE = GRID_ALIGNMENT_BASE;
exports.GridItem = GridItem;
//# sourceMappingURL=GridItem.js.map
