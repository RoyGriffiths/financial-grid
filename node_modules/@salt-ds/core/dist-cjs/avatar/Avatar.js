'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var icons = require('@salt-ds/icons');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var clsx = require('clsx');
var React = require('react');
var useAvatarImage = require('./useAvatarImage.js');
var makePrefixer = require('../utils/makePrefixer.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var Avatar$1 = require('./Avatar.css.js');

const withBaseName = makePrefixer.makePrefixer("saltAvatar");
const DEFAULT_AVATAR_SIZE = 2;
const defaultNameToInitials = (name) => name == null ? void 0 : name.split(" ").slice(0, 2).map((n) => n[0]).join("").toUpperCase();
const Avatar = React.forwardRef(function Avatar2({
  className,
  children: childrenProp,
  name,
  nameToInitials = defaultNameToInitials,
  src,
  size = DEFAULT_AVATAR_SIZE,
  style: styleProp,
  fallbackIcon = /* @__PURE__ */ jsxRuntime.jsx(icons.UserSolidIcon, {
    "aria-label": "User Avatar"
  }),
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-avatar",
    css: Avatar$1,
    window: targetWindow
  });
  let children;
  const style = {
    ...styleProp,
    "--saltAvatar-size-multiplier": `${size}`
  };
  const status = useAvatarImage.useAvatarImage({ src });
  const hasImgNotFailing = status === "loaded";
  if (hasImgNotFailing) {
    children = /* @__PURE__ */ jsxRuntime.jsx("img", {
      alt: name,
      src
    });
  } else if (childrenProp != null) {
    children = childrenProp;
  }
  const avatarInitials = nameToInitials(name);
  const initialsProps = avatarInitials ? {
    role: "img",
    "aria-label": name
  } : {};
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    ref,
    style,
    className: clsx.clsx(
      withBaseName(),
      { [withBaseName("withImage")]: hasImgNotFailing },
      className
    ),
    ...initialsProps,
    ...rest,
    children: children || avatarInitials || fallbackIcon
  });
});

exports.Avatar = Avatar;
//# sourceMappingURL=Avatar.js.map
