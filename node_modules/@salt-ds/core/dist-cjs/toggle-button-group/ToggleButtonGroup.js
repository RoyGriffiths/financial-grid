'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var ToggleButtonGroupContext = require('./ToggleButtonGroupContext.js');
var ToggleButtonGroup$1 = require('./ToggleButtonGroup.css.js');

const withBaseName = makePrefixer.makePrefixer("saltToggleButtonGroup");
const ToggleButtonGroup = React.forwardRef(function ToggleButtonGroup2(props, ref) {
  const {
    children,
    className,
    value: valueProp,
    defaultValue,
    disabled,
    onChange,
    onKeyDown,
    orientation = "horizontal",
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-toggle-button-group",
    css: ToggleButtonGroup$1,
    window: targetWindow
  });
  const groupRef = React.useRef(null);
  const handleRef = useForkRef.useForkRef(ref, groupRef);
  const [value, setValue] = useControlled.useControlled({
    default: defaultValue,
    controlled: valueProp,
    name: "ToggleButtonGroup",
    state: "value"
  });
  const [focused, setFocused] = React.useState(value);
  const select = React.useCallback(
    (event) => {
      const newValue = event.currentTarget.value;
      setValue(newValue);
      if (value !== newValue) {
        onChange == null ? void 0 : onChange(event);
      }
    },
    [onChange, value, setValue]
  );
  const isSelected = React.useCallback(
    (id) => {
      return value === id;
    },
    [value]
  );
  const focus = (id) => {
    setFocused(id);
  };
  const isFocused = React.useCallback(
    (id) => {
      return focused === id || !focused;
    },
    [focused]
  );
  const contextValue = React.useMemo(
    () => ({
      select,
      isSelected,
      focus,
      isFocused,
      disabled,
      orientation
    }),
    [select, isSelected, isFocused, disabled, orientation]
  );
  const handleKeyDown = (event) => {
    var _a, _b, _c, _d;
    const elements = Array.from(
      (_b = (_a = groupRef.current) == null ? void 0 : _a.querySelectorAll("button:not([disabled])")) != null ? _b : []
    );
    const currentIndex = elements.findIndex(
      (element) => element === document.activeElement
    );
    switch (event.key) {
      case "ArrowDown":
      case "ArrowRight":
        (_c = elements[(currentIndex + 1) % elements.length]) == null ? void 0 : _c.focus();
        break;
      case "ArrowUp":
      case "ArrowLeft":
        (_d = elements[(currentIndex - 1 + elements.length) % elements.length]) == null ? void 0 : _d.focus();
        break;
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  return /* @__PURE__ */ jsxRuntime.jsx(ToggleButtonGroupContext.ToggleButtonGroupContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: clsx.clsx(withBaseName(), withBaseName(orientation), className),
      role: "radiogroup",
      ref: handleRef,
      onKeyDown: handleKeyDown,
      ...rest,
      children
    })
  });
});

exports.ToggleButtonGroup = ToggleButtonGroup;
//# sourceMappingURL=ToggleButtonGroup.js.map
