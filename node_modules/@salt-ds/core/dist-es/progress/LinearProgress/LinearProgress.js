import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { clsx } from 'clsx';
import { makePrefixer } from '../../utils/makePrefixer.js';
import '../../utils/useFloatingUI/useFloatingUI.js';
import '../../utils/useId.js';
import '../../salt-provider/SaltProvider.js';
import '../../viewport/ViewportProvider.js';
import { Text } from '../../text/Text.js';
import '../../text/Display.js';
import '../../text/Headings.js';
import '../../text/Label.js';
import '../../text/TextNotation.js';
import '../../text/TextAction.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './LinearProgress.css.js';

const withBaseName = makePrefixer("saltLinearProgress");
const LinearProgress = forwardRef(
  function LinearProgress2({ className, hideLabel = false, max = 100, min = 0, value = 0, ...rest }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-linear-progress",
      css: css_248z,
      window: targetWindow
    });
    const progress = (value - min) / (max - min) * 100;
    const barStyle = {};
    const trackStyle = {};
    barStyle.transform = `translateX(${progress - 100}%)`;
    trackStyle.transform = `translateX(${progress}%)`;
    return /* @__PURE__ */ jsxs("div", {
      className: clsx(withBaseName(), className),
      ref,
      role: "progressbar",
      "aria-valuemax": max,
      "aria-valuemin": min,
      "aria-valuenow": Math.round(value),
      ...rest,
      children: [
        /* @__PURE__ */ jsxs("div", {
          className: withBaseName("barContainer"),
          children: [
            /* @__PURE__ */ jsx("div", {
              className: withBaseName("bar"),
              style: barStyle
            }),
            /* @__PURE__ */ jsx("div", {
              className: withBaseName("track"),
              style: trackStyle
            })
          ]
        }),
        !hideLabel && /* @__PURE__ */ jsx(Text, {
          styleAs: "h2",
          className: withBaseName("progressLabel"),
          children: `${Math.round(progress)} %`
        })
      ]
    });
  }
);

export { LinearProgress };
//# sourceMappingURL=LinearProgress.js.map
