import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, isValidElement, cloneElement } from 'react';
import '../status-indicator/StatusIndicator.js';
import { VALIDATION_NAMED_STATUS } from '../status-indicator/ValidationStatus.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useFloatingComponent } from '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { mergeProps } from '../utils/mergeProps.js';
import { useTooltip } from './useTooltip.js';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { TooltipBase } from './TooltipBase.js';

const withBaseName = makePrefixer("saltTooltip");
const Tooltip = forwardRef(
  function Tooltip2(props, ref) {
    const {
      children,
      className,
      disabled: disabledProp = false,
      hideArrow = false,
      hideIcon = false,
      open: openProp,
      content,
      status: statusProp = "info",
      placement = "right",
      enterDelay = 300,
      leaveDelay = 0,
      ...rest
    } = props;
    const {
      disabled: formFieldDisabled,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps();
    const disabled = disabledProp || formFieldDisabled;
    const status = formFieldValidationStatus !== void 0 && VALIDATION_NAMED_STATUS.includes(formFieldValidationStatus) ? formFieldValidationStatus : statusProp;
    const { Component: FloatingComponent } = useFloatingComponent();
    const hookProps = {
      open: openProp,
      placement,
      enterDelay,
      leaveDelay,
      ...rest
    };
    const {
      arrowProps,
      open,
      floating,
      reference,
      getTriggerProps,
      getTooltipProps,
      getTooltipPosition
    } = useTooltip(hookProps);
    const triggerRef = useForkRef(
      isValidElement(children) ? children.ref : null,
      reference
    );
    const floatingRef = useForkRef(floating, ref);
    const hasContent = !!content;
    return /* @__PURE__ */ jsxs(Fragment, {
      children: [
        isValidElement(children) && cloneElement(children, {
          ...mergeProps(getTriggerProps(), children.props),
          ref: triggerRef
        }),
        /* @__PURE__ */ jsx(FloatingComponent, {
          className: clsx(withBaseName(), withBaseName(status), className),
          open: open && !disabled && hasContent,
          ...getTooltipProps(),
          ref: floatingRef,
          ...getTooltipPosition(),
          children: /* @__PURE__ */ jsx(TooltipBase, {
            hideIcon,
            status,
            content,
            hideArrow,
            arrowProps
          })
        })
      ]
    });
  }
);

export { Tooltip };
//# sourceMappingURL=Tooltip.js.map
