import { offset, flip, shift, limitShift, arrow, useInteractions, useHover, safePolygon, useFocus, useRole, useDismiss } from '@floating-ui/react';
import { useRef } from 'react';
import { useControlled } from '../utils/useControlled.js';
import { useFloatingUI } from '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import 'clsx';
import { useAriaAnnounce } from './useAriaAnnounce.js';

function useTooltip(props) {
  const {
    enterDelay,
    leaveDelay,
    open: openProp,
    onOpenChange,
    placement: placementProp,
    disableHoverListener,
    disableFocusListener
  } = props || {};
  const arrowRef = useRef(null);
  const [open, setOpen] = useControlled({
    controlled: openProp,
    default: false,
    name: "Tooltip",
    state: "open"
  });
  const handleOpenChange = (open2) => {
    setOpen(open2);
    onOpenChange == null ? void 0 : onOpenChange(open2);
  };
  const { floating, reference, x, y, strategy, placement, context, elements } = useFloatingUI({
    open,
    onOpenChange: handleOpenChange,
    placement: placementProp,
    middleware: [
      offset(8),
      flip(),
      shift({ limiter: limitShift() }),
      arrow({ element: arrowRef })
    ]
  });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useHover(context, {
      delay: {
        open: enterDelay,
        close: leaveDelay
      },
      enabled: !disableHoverListener,
      handleClose: safePolygon()
    }),
    useFocus(context, { enabled: !disableFocusListener }),
    useRole(context, { role: "tooltip" }),
    useDismiss(context),
    useAriaAnnounce(context, {
      delay: {
        open: enterDelay,
        close: leaveDelay
      }
    })
  ]);
  const arrowProps = {
    ref: arrowRef,
    context
  };
  const getTooltipProps = () => {
    const { tabIndex, ...tooltipProps } = getFloatingProps({
      "data-placement": placement,
      ref: floating
    });
    return tooltipProps;
  };
  const getTriggerProps = () => getReferenceProps({
    ref: reference
  });
  const getTooltipPosition = () => {
    var _a, _b;
    return {
      top: y != null ? y : 0,
      left: x != null ? x : 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  };
  return {
    arrowProps,
    open,
    floating,
    reference,
    getTooltipProps,
    getTriggerProps,
    getTooltipPosition
  };
}

export { useTooltip };
//# sourceMappingURL=useTooltip.js.map
