import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import React__default, { createContext, useContext, useMemo } from 'react';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import { ViewportProvider } from '../viewport/ViewportProvider.js';
import { AriaAnnouncerProvider } from '../aria-announcer/AriaAnnouncerProvider.js';
import { DEFAULT_BREAKPOINTS } from '../breakpoints/Breakpoints.js';
import css_248z from './SaltProvider.css.js';
import { useWindow } from '@salt-ds/window';
import { StyleInjectionProvider, useComponentCssInjection } from '@salt-ds/styles';

const DEFAULT_DENSITY = "medium";
const DEFAULT_THEME_NAME = "salt-theme";
const DEFAULT_MODE = "light";
const DensityContext = createContext(DEFAULT_DENSITY);
const ThemeContext = createContext({
  theme: "",
  mode: DEFAULT_MODE
});
const BreakpointContext = createContext(DEFAULT_BREAKPOINTS);
const createThemedChildren = (children, themeName, density, mode, applyClassesTo) => {
  var _a;
  const themeNames = themeName === DEFAULT_THEME_NAME ? [DEFAULT_THEME_NAME] : [DEFAULT_THEME_NAME, themeName];
  if (applyClassesTo === "root") {
    return children;
  } else if (applyClassesTo === "child") {
    if (React__default.isValidElement(children)) {
      return React__default.cloneElement(children, {
        className: clsx(
          (_a = children.props) == null ? void 0 : _a.className,
          ...themeNames,
          `salt-density-${density}`
        ),
        "data-mode": mode
      });
    } else {
      console.warn(
        `
SaltProvider can only apply CSS classes for theming to a single nested child element of the SaltProvider.
        Either wrap elements with a single container or consider removing the applyClassesToChild prop, in which case a
        div element will wrap your child elements`
      );
      return children;
    }
  } else {
    return /* @__PURE__ */ jsx("div", {
      className: clsx(
        `salt-provider`,
        ...themeNames,
        `salt-density-${density}`
      ),
      "data-mode": mode,
      children
    });
  }
};
function InternalSaltProvider({
  applyClassesTo: applyClassesToProp,
  children,
  density: densityProp,
  theme: themeProp,
  mode: modeProp,
  breakpoints: breakpointsProp
}) {
  var _a;
  const inheritedDensity = useContext(DensityContext);
  const { theme: inheritedThemes, mode: inheritedMode } = useTheme();
  const isRoot = inheritedThemes === void 0 || inheritedThemes === "";
  const density = (_a = densityProp != null ? densityProp : inheritedDensity) != null ? _a : DEFAULT_DENSITY;
  const themeName = themeProp != null ? themeProp : inheritedThemes === "" ? DEFAULT_THEME_NAME : inheritedThemes;
  const mode = modeProp != null ? modeProp : inheritedMode;
  const breakpoints = breakpointsProp != null ? breakpointsProp : DEFAULT_BREAKPOINTS;
  const applyClassesTo = applyClassesToProp != null ? applyClassesToProp : isRoot ? "root" : "scope";
  const themeContextValue = useMemo(
    () => ({ theme: themeName, mode }),
    [themeName, mode]
  );
  const themedChildren = createThemedChildren(
    children,
    themeName,
    density,
    mode,
    applyClassesTo
  );
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-provider",
    css: css_248z,
    window: targetWindow
  });
  useIsomorphicLayoutEffect(() => {
    const themeNames = themeName === DEFAULT_THEME_NAME ? [DEFAULT_THEME_NAME] : [DEFAULT_THEME_NAME, themeName];
    if (applyClassesTo === "root" && targetWindow) {
      if (isRoot) {
        targetWindow.document.documentElement.classList.add(
          ...themeNames,
          `salt-density-${density}`
        );
        targetWindow.document.documentElement.dataset.mode = mode;
      } else {
        console.warn(
          "\nSaltProvider can only apply CSS classes to the root if it is the root level SaltProvider."
        );
      }
    }
    return () => {
      if (applyClassesTo === "root" && targetWindow) {
        targetWindow.document.documentElement.classList.remove(
          ...themeNames,
          `salt-density-${density}`
        );
        targetWindow.document.documentElement.dataset.mode = void 0;
      }
    };
  }, [applyClassesTo, density, isRoot, mode, themeName, targetWindow]);
  const saltProvider = /* @__PURE__ */ jsx(DensityContext.Provider, {
    value: density,
    children: /* @__PURE__ */ jsx(ThemeContext.Provider, {
      value: themeContextValue,
      children: /* @__PURE__ */ jsx(BreakpointContext.Provider, {
        value: breakpoints,
        children: /* @__PURE__ */ jsx(ViewportProvider, {
          children: themedChildren
        })
      })
    })
  });
  if (isRoot) {
    return /* @__PURE__ */ jsx(AriaAnnouncerProvider, {
      children: saltProvider
    });
  } else {
    return saltProvider;
  }
}
function SaltProvider({
  enableStyleInjection,
  ...restProps
}) {
  return /* @__PURE__ */ jsx(StyleInjectionProvider, {
    value: enableStyleInjection,
    children: /* @__PURE__ */ jsx(InternalSaltProvider, {
      ...restProps
    })
  });
}
const useTheme = () => {
  return useContext(ThemeContext);
};
function useDensity(density) {
  const densityFromContext = useContext(DensityContext);
  return density || densityFromContext || DEFAULT_DENSITY;
}
const useBreakpoints = () => {
  return useContext(BreakpointContext);
};

export { BreakpointContext, DEFAULT_DENSITY, DensityContext, SaltProvider, ThemeContext, useBreakpoints, useDensity, useTheme };
//# sourceMappingURL=SaltProvider.js.map
