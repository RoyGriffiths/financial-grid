import { jsxs, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import { useRadioGroup } from './internal/useRadioGroup.js';
import { RadioButtonIcon } from './RadioButtonIcon.js';
import css_248z from './RadioButton.css.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';

const withBaseName = makePrefixer("saltRadioButton");
const RadioButton = forwardRef(
  function RadioButton2(props, ref) {
    var _a, _b;
    const {
      checked: checkedProp,
      className,
      disabled: disabledProp,
      error,
      inputProps = {},
      label,
      name: nameProp,
      onFocus,
      onBlur,
      onChange,
      readOnly: readOnlyProp,
      value,
      validationStatus: validationStatusProp,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-radio-button",
      css: css_248z,
      window: targetWindow
    });
    const {
      a11yProps: formFieldA11yProps,
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps();
    const radioGroup = useRadioGroup();
    const {
      "aria-describedby": inputDescribedBy,
      "aria-labelledby": inputLabelledBy,
      className: inputClassName,
      onChange: inputOnChange,
      ...restInputProps
    } = inputProps;
    const disabled = (radioGroup == null ? void 0 : radioGroup.disabled) || formFieldDisabled || disabledProp;
    const readOnly = (radioGroup == null ? void 0 : radioGroup.readOnly) || formFieldReadOnly || readOnlyProp;
    const validationStatus = !disabled ? (_b = (_a = radioGroup == null ? void 0 : radioGroup.validationStatus) != null ? _a : formFieldValidationStatus) != null ? _b : validationStatusProp : void 0;
    const radioGroupChecked = (radioGroup == null ? void 0 : radioGroup.value) != null && value != null ? radioGroup.value === value : checkedProp;
    const name = nameProp != null ? nameProp : radioGroup == null ? void 0 : radioGroup.name;
    const [checked, setCheckedState] = useControlled({
      controlled: radioGroupChecked,
      default: Boolean(checkedProp),
      name: "RadioBase",
      state: "checked"
    });
    const handleChange = (event) => {
      var _a2;
      if (readOnly)
        return;
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      onChange == null ? void 0 : onChange(event);
      inputOnChange == null ? void 0 : inputOnChange(event);
      (_a2 = radioGroup == null ? void 0 : radioGroup.onChange) == null ? void 0 : _a2.call(radioGroup, event);
    };
    return /* @__PURE__ */ jsxs("label", {
      className: clsx(
        withBaseName(),
        {
          [withBaseName("disabled")]: disabled,
          [withBaseName("readOnly")]: readOnly,
          [withBaseName("error")]: error,
          [withBaseName(validationStatus || "")]: validationStatus
        },
        className
      ),
      ref,
      ...rest,
      children: [
        /* @__PURE__ */ jsx("input", {
          "aria-describedby": clsx(
            radioGroup == void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-describedby"] : void 0,
            inputDescribedBy
          ) || void 0,
          "aria-labelledby": clsx(
            radioGroup == void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-labelledby"] : void 0,
            inputLabelledBy
          ) || void 0,
          className: clsx(withBaseName("input"), inputClassName),
          checked,
          disabled,
          readOnly,
          name,
          value,
          onBlur,
          onChange: handleChange,
          onFocus,
          type: "radio",
          ...restInputProps
        }),
        /* @__PURE__ */ jsx(RadioButtonIcon, {
          checked,
          disabled,
          readOnly,
          validationStatus,
          error
        }),
        label
      ]
    });
  }
);

export { RadioButton };
//# sourceMappingURL=RadioButton.js.map
