import { jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { clsx } from 'clsx';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useResponsiveProp } from '../utils/useResponsiveProp.js';
import css_248z from './FlexLayout.css.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';

const withBaseName = makePrefixer("saltFlexLayout");
const FLEX_ALIGNMENT_BASE = ["start", "end", "center"];
const FLEX_CONTENT_ALIGNMENT_BASE = [
  ...FLEX_ALIGNMENT_BASE,
  "space-between",
  "space-around",
  "space-evenly"
];
const FlexLayout = forwardRef(
  ({
    as,
    align,
    children,
    className,
    direction,
    gap,
    justify,
    separators,
    style,
    wrap,
    ...rest
  }, ref) => {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-flex-layout",
      css: css_248z,
      window: targetWindow
    });
    const Component = as || "div";
    const separatorAlignment = separators === true ? "center" : separators;
    const addPrefix = (style2) => {
      return style2 === "start" || style2 === "end" ? `flex-${style2}` : style2;
    };
    const flexGap = useResponsiveProp(gap, 3);
    const flexDirection = useResponsiveProp(direction, "row");
    const flexWrap = useResponsiveProp(wrap, false);
    const flexLayoutStyles = {
      ...style,
      "--flexLayout-align": align && addPrefix(align),
      "--flexLayout-direction": flexDirection,
      "--flexLayout-gap-multiplier": flexGap,
      "--flexLayout-justify": justify && addPrefix(justify),
      "--flexLayout-wrap": flexWrap ? "wrap" : "nowrap"
    };
    return /* @__PURE__ */ jsx(Component, {
      className: clsx(
        withBaseName(),
        {
          [withBaseName("separator")]: separatorAlignment && !wrap,
          [withBaseName(
            `separator-${flexDirection || "row"}-${separatorAlignment || "center"}`
          )]: separatorAlignment && !wrap,
          [withBaseName(`separator-${flexDirection || "row"}`)]: separatorAlignment && !wrap
        },
        className
      ),
      ref,
      style: flexLayoutStyles,
      ...rest,
      children
    });
  }
);

export { FLEX_ALIGNMENT_BASE, FLEX_CONTENT_ALIGNMENT_BASE, FlexLayout };
//# sourceMappingURL=FlexLayout.js.map
