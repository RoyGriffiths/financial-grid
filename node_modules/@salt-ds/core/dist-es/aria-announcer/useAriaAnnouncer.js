import { useContext, useRef, useCallback, useMemo, useEffect } from 'react';
import { debounce } from '../utils/debounce.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import 'clsx';
import { AriaAnnouncerContext } from './AriaAnnouncerContext.js';

let warnedOnce = false;
const useAriaAnnouncer = ({
  debounce: debounceInterval = 0
} = {}) => {
  const context = useContext(AriaAnnouncerContext);
  const mountedRef = useRef(true);
  const baseAnnounce = useCallback(
    (announcement, delay) => {
      const isReactAnnouncerInstalled = context && context.announce;
      if (process.env.NODE_ENV !== "production") {
        if (isReactAnnouncerInstalled && warnedOnce) {
          console.warn(
            "useAriaAnnouncer is being used without an AriaAnnouncerProvider. Your application should be wrapped in an AriaAnnouncerProvider"
          );
          warnedOnce = true;
        }
      }
      function makeAnnouncement() {
        if (mountedRef.current) {
          if (isReactAnnouncerInstalled) {
            context.announce(announcement);
          }
        }
      }
      if (delay) {
        setTimeout(makeAnnouncement, delay);
      } else {
        makeAnnouncement();
      }
    },
    [context]
  );
  const announce = useMemo(
    () => debounceInterval > 0 ? debounce(baseAnnounce, debounceInterval) : baseAnnounce,
    [baseAnnounce, debounceInterval]
  );
  const ariaAnnouncer = useMemo(
    () => ({
      ...context,
      announce
    }),
    [context, announce]
  );
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);
  return ariaAnnouncer;
};

export { useAriaAnnouncer };
//# sourceMappingURL=useAriaAnnouncer.js.map
